Hello,
I am excited to share my latest project work on end-to-end financial data analysis project using the Czechoslovakia bank dataset.
This project is fully functional automated financial model, where clients can simply uploaddata in AWS cloud and dashboards will
update automatically in power BI.

Power BI Dashboard = 

Following steps are required >>>>

Excel > AWS > Snowflake > Power BI

Step 1 [in MS Excel] :
# Basic Data CLeaning.
# Change File Type to CSV format.

Step2 [AWS] :
# Bucket Creation in S3.
# Create folder under new created bucket.
# Role Assigning.
# Policy Creation.

Step 3 [Snowflake]:
# Build connection and Extract Data
# Transform Data
# Load Data
# Dashboard Creation

Step 4 [Power BI]:
# Build Connection and Extract Data
# Transform Data
# Load data
# Dashboard Creation

Here is the Snowflake SQL data cleaning code.

# Data cleaning in snowflake with sql Worksheet.


# Create a district table.

CREATE OR REPLACE TABLE district 
(
District_code INT Primary key,
District_Name VARCHAR(100),
Region VARCHAR(100),
No_of_inhabitants INT,
No_of_municipalities_with_inhabitants_less_than_499 INT,
No_of_municipalities_with_inhabitants_500_btw_1999 INT,
No_of_municipalities_with_inhabitants_2000_btw_1999 INT,
No_of_municipalities_with_inhabitants_less_10000 INT,
No_of_cities INT,
Ratio_of_urban_inhabitants FLOAT,
Average_salary INT,
No_of_enterpreneurs_per_inhabitants INT,
No_of_committed_crime_2017 INT,
No_of_committed_crime_2018 INT
);


# create account table.

CREATE OR REPLACE TABLE ACCOUNT
(
account_id INT PRIMARY KEY,
district_id INT,
frequency VARCHAR(40),
date DATE,
account_type VARCHAR(100),
card_assigned VARCHAR(20)
);

# create card table.

CREATE OR REPLACE TABLE card
(
card_id int primary key,
disp_id int,
type char(50),
issued DATE,
FOREIGN KEY (disp_id) REFERENCES Disposition(disp_id)
);

# create client table.

CREATE OR REPLACE TABLE client
(
client_id int primary key,
sex char(10),
Birth_date date,
district_id INT,
foreign key(district_id) references district(district_code)
);

# create loan table.

Create or replace table loan
(
loan_id INT,
account_id INT,
Date VARCHAR,
amount INT,
duration INT,
paymrnts INT,
status VARCHAR(35),
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

# create transactions table.

CREATE OR REPLACE TABLE transactions
(
trans_id INT,
account_id INT,
date DATE,
Type Varchar(40),
operation Varchar(50),
amount INT,
balance INT,
Purpose Varchar(40),
bank Varchar(45),
account_partner_id INT,
Foreign key (account_id) references ACCOUNT(account_id) 
);

# create table order_

CREATE OR REPLACE TABLE ORDER_
(
order_id INT primary key,
account_id INT,
bank_to Varchar(45),
account_to INT,
amount FLOAT,
FOREIGN KEY (account_id) references ACCOUNT(account_id)
);

#create table disposition.

CREATE OR REPLACE TABLE disposition
(
disp_id INT primary key,
client_id INT,
account_id INT,
type CHAR(15),
FOREIGN KEY(account_id) references ACCOUNT(account_id),
FOREIGN KEY(client_id) references CLIENT(client_id)
);

# create storage_integration "s3_int" for loading the data into AWS to snowflake.

CREATE OR REPLACE STORAGE integration s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = s3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::186165438532:role/bankrole_'
STORAGE_ALLOWED_LOCATIONS = ('s3://myczechbankdatap/');

DESC integration s3_int;

# Create stage bank "BANK":
create or replace STAGE BANK
URL = 's3://myczechbankdatap'
file_format = CSV
storage_integration = s3_int;

LIST @BANK;

SHOW STAGES;

#Create a file format.
CREATE FILE FORMAT CSV1
TYPE = CSV
FIELD_DELIMITER = ','
RECORD_DELIMITER = '\n'
SKIP_HEADER =1;

SHOW PIPES;

### create pipeline in between AWS and SNOWFLAKE for load the data.

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISTRICT AUTO_INGEST = TRUE AS
COPY INTO BANK.PUBLIC.DISTRICT  -- database -- schema -- table
FROM '@BANK/District/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_ACCOUNT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ACCOUNT"
FROM '@BANK/Account/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_txns AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."TRANSACTIONS"
FROM '@BANK/Trnx/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_DISP AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."DISPOSITION"
FROM '@BANK/disp/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CARD AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CARD"
FROM '@BANK/Card/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_order_list AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."ORDER_"
FROM '@BANK/Order/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_LOAN AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."LOAN"
FROM '@BANK/Loan/'
FILE_FORMAT = CSV1;

CREATE OR REPLACE PIPE BANK_SNOWPIPE_CLIENT AUTO_INGEST = TRUE AS
COPY INTO "BANK"."PUBLIC"."CLIENT"
FROM '@BANK/Client/'
FILE_FORMAT = CSV1;

SHOW PIPES;

SELECT COUNT(*) FROM DISTRICT;
SELECT COUNT(*) FROM ACCOUNT;
SELECT COUNT(*) FROM TRANSACTIONS;
SELECT COUNT(*) FROM DISPOSITION;
SELECT COUNT(*) FROM CARD;
SELECT COUNT(*) FROM ORDER_;
SELECT COUNT(*) FROM LOAN;
SELECT COUNT(*) FROM CLIENT;

ALTER PIPE BANK_SNOWPIPE_DISTRICT refresh;
ALTER PIPE BANK_SNOWPIPE_ACCOUNT refresh;
ALTER PIPE BANK_SNOWPIPE_TXNS refresh;
ALTER PIPE BANK_SNOWPIPE_DISP refresh;
ALTER PIPE BANK_SNOWPIPE_CARD refresh;
ALTER PIPE BANK_SNOWPIPE_ORDER_LIST refresh;
ALTER PIPE BANK_SNOWPIPE_LOAN refresh;
ALTER PIPE BANK_SNOWPIPE_CLIENT refresh;

select * from DISTRICT;
select* from ACCOUNT;
select* from TRANSACTIONS;
select* from  CARD;
select* from  ORDER_;
select* from  LOAN;
select* from CLIENT;
------------------------------------------------------------------------------------------------------------
### data cleaning:

# FIRST ,WE FINDING NULL VALUES IN BANK DATASET,

SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(DATE) = '2016';

SELECT YEAR(DATE) AS TXN_YEAR, COUNT(*) AS TOT_TXNS
FROM TRANSACTIONS
WHERE BANK IS NULL
GROUP BY 1
ORDER BY 2 DESC;

SELECT YEAR(DATE) AS TXN_YEAR, COUNT(*) AS TOT_TXNS
FROM TRANSACTIONS
GROUP BY 1
ORDER BY 2 DESC;

SELECT DISTINCT YEAR(DATE), COUNT(*) 
FROM ACCOUNT
GROUP BY 1
ORDER BY 1 DESC;


SELECT DISTINCT YEAR(DATE) 
FROM TRANSACTIONS 
ORDER BY 1;

### UPDATE TABLE TRANSACTIONS.

/*
 CONVERTING 2021 TXN_YEAR TO 2022
 CONVERTING 2020 TXN_YEAR TO 2021
 CONVERTING 2018 TXN_YEAR TO 2020
 CONVERTING 2017 TXN_YEAR TO 2019
 CONVERTING 2016 TXN_YEAR TO 2018
*/


UPDATE TRANSACTIONS
SET DATE = DATEADD(YEAR,1,DATE)
WHERE YEAR(DATE) = 2021;

SET DATE = DATEADD(YEAR,1,DATE)
WHERE YEAR(DATE) = 2020;

SET DATE = DATEADD(YEAR,2,DATE)
WHERE YEAR(DATE) = 2018;

SET DATE = DATEADD(YEAR,2,DATE)
WHERE YEAR(DATE) = 2017;

SET DATE = DATEADD(YEAR,2,DATE)
WHERE YEAR(DATE) = 2016;

SELECT MIN(DATE), MAX(DATE) FROM TRANSACTIONS;

UPDATE TRANSACTIONS
SET BANK 'SKY_BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2022;

UPDATE TRANSACTIONS
SET BANK = 'NORTHERN BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2020;

UPDATE TRANSACTIONS
SET BANK = 'SOUTHERN BANK' WHERE BANK IS NULL AND YEAR(DATE) = 2019;

UPDATE TRANSACTIONS
SET BANK = 'ADB BANK' WHERE BANKIS NULL AND YEAR(DATE) = 2018;

SELECT * FROM TRANSACTIONS WHERE BANK IS NULL AND YEAR(DATE) = 2018;

SELECT * FROM TRANSACTIONS WHERE BANK = NULL;

SELECT DISTINCT YRAR(ISUED) FROM CARD;

-- ADDING AGE COLUMN TO THE CLIENT TABLE

ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT 
SET AGE = DATEDIFF('YEAR', BIRTH_DATE, '2022-12-19');

-- CARD TABLE UPDATE

SELECT * FROM CARD;
SELECT TYPE FROM CARD WHERE YEAR(ISUED) = 2022;

SELECT DISTINCT YEAR(ISSUED) FROM CARD;

UPDATE CARD
SET ISSUED = DATEADD(YEAR,1,ISSUED)
WHERE YEAR(ISSUED) = 2016;

SELECT * FROM ACCOUNT;
SELECT DISTINCT YEAR(DATE) FROM ACCOUNT;

-- FINDING MALE AND FEMALE 

SELECT 
SUM(CASE WHEN SEX = 'MALE' THEN 1 ELSE 0 END)/ COUNT(*) * 100.0 AS MALE_PERCENTAGE,
SUM(CASE WHEN SEX = 'FEMALE' THEN 1 ELSE 0 END)/ COUNT(*)*100.0 AS FEMALE_PERCENTAGE
FROM CLIENT;

-- FINDING MALE FEMALE PERCENTAGE % 

SELECT 
SUM(CASE WHEN SEX = 'MALE' THEN 1 ELSE 0 END)/COUNT(*)*100.0 AS MALE_PERCENTAGE,
SUM(CASE WHEN SEX = 'FEMALE' THEN 1 ELSE 0 END)/COUNT(*)*100.0 AS FEMALE_PERCENTAGE
FROM CLIENT;

---- ADDING AGE COLUMN TO THE CLIENT TABLE.

ALTER TABLE CLIENT
ADD COLUMN AGE INT;

UPDATE CLIENT 
SET AGE  = DATEDIFF('YEAR', BIRTH_DATE,'2022-12-19');



-- 1.What is the demographic profile of the bank's clients and how does it vary across districts?

create or replace table czec_demographic_data_kpi as
SELECT  C.DISTRICT_ID,D.DISTRICT_NAME,D.AVERAGE_SALARY,
ROUND(AVG(C.AGE),0) AS AVG_AGE,
SUM(CASE WHEN SEX = 'Male' THEN 1 ELSE 0 END) AS MALE_CLIENT ,
SUM(CASE WHEN SEX = 'Female' THEN 1 ELSE 0 END) AS FEMALE_CLIENT ,
ROUND((FEMALE_CLIENT/MALE_CLIENT)*100,2) AS MALE_FEMALE_RATIO_PERC,
COUNT(*)AS TOTAL_CLIENT
FROM CLIENT C
INNER JOIN DISTRICT D ON C.DISTRICT_ID = D.DISTRICT_CODE
GROUP BY 1,2,3
ORDER BY 1;

select * from czec_demographic_data_kpi ;

-- 2. How the banks have performed over the years. Give their detailed analysis month wise?

SELECT * FROM ACC_LATEST_TXNS_WITH_BALANCE ;

SELECT LATEST_TXN_DATE,COUNT(*) AS TOT_TXNS
FROM ACC_LATEST_TXNS_WITH_BALANCE
GROUP BY 1
ORDER BY 2 DESC;

-- ASSUMING EVERY LAST MONTH CUSTOMER ACCOUNT IS GETTING TXNCTED

CREATE OR REPLACE TABLE ACC_LATEST_TXNS_WITH_BALANCE 
AS
SELECT LTD.*,TXN.BALANCE
FROM TRANSACTIONS AS TXN
INNER JOIN 
(
   SELECT ACCOUNT_ID,YEAR(DATE) AS TXN_YEAR,
   MONTH(DATE) AS TXN_MONTH,
   MAX(DATE) AS LATEST_TXN_DATE
   FROM TRANSACTIONS
   GROUP BY 1,2,3
   ORDER BY 1,2,3

) AS LTD ON TXN.ACCOUNT_ID = LTD.ACCOUNT_ID AND TXN.DATE = LTD.LATEST_TXN_DATE
WHERE TXN.TYPE = 'Credit' -- this is the assumptions am having : month end txn data is credit
ORDER BY TXN.ACCOUNT_ID,LTD.TXN_YEAR,LTD.TXN_MONTH;

select * from ACC_LATEST_TXNS_WITH_BALANCE;
-------------------------------------------------------------------------------------------
CREATE OR REPLACE TABLE BANKING_KPI AS
SELECT  ALWB.TXN_YEAR , ALWB.TXN_MONTH,T.BANK,A.ACCOUNT_TYPE,

COUNT(DISTINCT ALWB.ACCOUNT_ID) AS TOT_ACCOUNT, 
COUNT(DISTINCT T.TRANS_ID) AS TOT_TXNS,
COUNT(CASE WHEN T.TYPE = 'Credit' THEN 1 END) AS DEPOSIT_COUNT ,
COUNT(CASE WHEN T.TYPE = 'Withdrawal' THEN 1 END) AS WITHDRAWAL_COUNT,

SUM(ALWB.BALANCE) AS TOT_BALANCE,

ROUND((DEPOSIT_COUNT / TOT_TXNS) * 100,2)  AS DEPOSIT_PERC ,
ROUND((WITHDRAWAL_COUNT / TOT_TXNS) * 100,2) AS WITHDRAWAL_PERC ,
NVL(TOT_BALANCE / TOT_ACCOUNT,0) AS AVG_BALANCE,

ROUND(TOT_TXNS/TOT_ACCOUNT,0) AS TPA

FROM TRANSACTIONS AS T
INNER JOIN  ACC_LATEST_TXNS_WITH_BALANCE AS ALWB ON T.ACCOUNT_ID = ALWB.ACCOUNT_ID
LEFT OUTER JOIN  ACCOUNT AS A ON T.ACCOUNT_ID = A.ACCOUNT_ID
GROUP BY 1,2,3,4
ORDER BY 1,2,3,4;

SELECT * FROM BANKING_KPI;
